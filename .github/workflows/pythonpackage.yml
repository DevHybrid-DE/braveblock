name: CI
on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Lint with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features
  test:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-latest , macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2.0.0
      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install dependencies
        run: poetry install
      - name: Build Python package
        run: poetry run maturin develop
      - name: pytest
        run: poetry run pytest tests
  deploy:
    needs: test
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip maturin
      - name: Build Python package
        run: maturin build --release --no-sdist --strip --interpreter python${{matrix.python_version}} --out dist
      - name: Publish distribution ðŸ“¦ to PyPI
        run: maturin publish --username __token__ --no-sdist --interpreter python${{matrix.python_version}}
        env:
          MATURIN_PASSWORD: ${{ secrets.pypi_password }}
